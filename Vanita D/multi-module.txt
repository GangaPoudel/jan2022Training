Multi Module Project:-
https://medium.com/javarevisited/maven-multimodule-project-a-detailed-view-e03a56e0d43d


A multi-module project is built from an aggregator POM that manages a group of submodules. Its is just like inheritance in oop
The significant advantage of using this approach is that we may reduce duplication.we can build our application's modules in a single command and if the order matters, Maven will figure this out for us. Also, we can share a vast amount of configuration with other modules.


For a multi module Maven project, In the root directory, there is a pom.xml there which is the parent pom and its packaging is pom. From the parent module, it is referencing the submodule.
Creating a multi module
1. mvn archetype:generate -DgroupId=org.baeldung -DartifactId=parent-project
2. <packaging>pom</packaging>
3. Create sub modules
Super Pom -Parent Pom -The super POM file defines all the default configurations. Hence, even the simplest form of a POM file will inherit all the configurations defined in the super POM file.
Optimal pom- The simplest POM is the POM that you declare in your Maven project. In order to declare a POM, you will need to specify at least these four elements: modelVersion, groupId, artifactId, and version. The simplest POM will inherit all the configurations from the super POM.
Let's have a look at the minimum required elements for a Maven project:
<project>
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.virtusa</groupId>
    <artifactId>submodule</artifactId>
    <version>1.0-SNAPSHOT</version>
</project>


Effective POM combines all the default settings from the super POM file and the configuration defined in our application POM. Maven uses default values for configuration elements when they are not overridden in the application pom.xml. Hence, if we take the same sample POM file from the simplest POM section, we'll see that the effective POM file will be the merge between simplest and super POM. We can visualize it from the command line:
mvn help:effective-pom




Surefire Reports - The Maven unit test reports are generated by the Maven Surefire plugin. Therefore a unit test report is also sometimes referred to as a surefire report.
This plugin has only one goal, a test. This goal is bound to the test phase of the default build lifecycle, and the command mvn test will execute it.The surefire plugin can work with the test frameworks JUnit and TestNG.